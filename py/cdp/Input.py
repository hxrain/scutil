"""THIS IS AUTOMATICALLY GENERATED CODE, DO NOT MANUALLY MODIFY!"""
from cdp.cdp_comm import *


# object: TouchPoint
class TouchPoint(TypingT):
    """
        TouchPoint
    """
    def __init__(self):
        # X coordinate of the event relative to the main frame's viewport in CSS pixels.
        self.x: int = int
        # Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers tothe top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
        self.y: int = int
        # OPTIONAL, X radius of the touch area (default: 1.0).
        self.radiusX: int = int
        # OPTIONAL, Y radius of the touch area (default: 1.0).
        self.radiusY: int = int
        # OPTIONAL, Rotation angle (default: 0.0).
        self.rotationAngle: int = int
        # OPTIONAL, Force (default: 1.0).
        self.force: int = int
        # OPTIONAL, Identifier used to track touch sources between events, must be unique within an event.
        self.id: int = int


# typing: GestureSourceType
GestureSourceType = str
GestureSourceTypeEnums = ['default', 'touch', 'mouse']


# typing: MouseButton
MouseButton = str
MouseButtonEnums = ['none', 'left', 'middle', 'right', 'back', 'forward']


# typing: UTC time in seconds, counted from January 1, 1970.
TimeSinceEpoch = int


# ================================================================================
# Input Domain.
# ================================================================================
class Input(DomainT):
    """
        Input
    """
    def __init__(self, drv):
        self.drv = drv


    # func: dispatchKeyEvent
    def dispatchKeyEvent(self,type:str, modifiers:int=None, timestamp:TimeSinceEpoch=None, text:str=None, unmodifiedText:str=None, keyIdentifier:str=None, code:str=None, key:str=None, windowsVirtualKeyCode:int=None, nativeVirtualKeyCode:int=None, autoRepeat:bool=None, isKeypad:bool=None, isSystemKey:bool=None, location:int=None, commands:List[str]=None):
        """
            Dispatches a key event to the page.
        Params:
            typeEnums = ['keyDown', 'keyUp', 'rawKeyDown', 'char']
            1. type: str
                Type of the key event.
            2. modifiers: int (OPTIONAL)
                Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8(default: 0).
            3. timestamp: TimeSinceEpoch (OPTIONAL)
                Time at which the event occurred.
            4. text: str (OPTIONAL)
                Text as generated by processing a virtual key code with a keyboard layout. Not needed forfor `keyUp` and `rawKeyDown` events (default: "")
            5. unmodifiedText: str (OPTIONAL)
                Text that would have been generated by the keyboard if no modifiers were pressed (except forshift). Useful for shortcut (accelerator) key handling (default: "").
            6. keyIdentifier: str (OPTIONAL)
                Unique key identifier (e.g., 'U+0041') (default: "").
            7. code: str (OPTIONAL)
                Unique DOM defined string value for each physical key (e.g., 'KeyA') (default: "").
            8. key: str (OPTIONAL)
                Unique DOM defined string value describing the meaning of the key in the context of activemodifiers, keyboard layout, etc (e.g., 'AltGr') (default: "").
            9. windowsVirtualKeyCode: int (OPTIONAL)
                Windows virtual key code (default: 0).
            10. nativeVirtualKeyCode: int (OPTIONAL)
                Native virtual key code (default: 0).
            11. autoRepeat: bool (OPTIONAL)
                Whether the event was generated from auto repeat (default: false).
            12. isKeypad: bool (OPTIONAL)
                Whether the event was generated from the keypad (default: false).
            13. isSystemKey: bool (OPTIONAL)
                Whether the event was a system key event (default: false).
            14. location: int (OPTIONAL)
                Whether the event was from the left or right side of the keyboard. 1=Left, 2=Right (default:0).
            15. commands: List[str] (OPTIONAL)
                Editing commands to send with the key event (e.g., 'selectAll') (default: []).These are related to but not equal the command names used in `document.execCommand` and NSStandardKeyBindingResponding.See https://source.chromium.org/chromium/chromium/src/+/master:third_party/blink/renderer/core/editing/commands/editor_command_names.h for valid command names.
        """
        return self.drv.call(None,'Input.dispatchKeyEvent',type=type, modifiers=modifiers, timestamp=timestamp, text=text, unmodifiedText=unmodifiedText, keyIdentifier=keyIdentifier, code=code, key=key, windowsVirtualKeyCode=windowsVirtualKeyCode, nativeVirtualKeyCode=nativeVirtualKeyCode, autoRepeat=autoRepeat, isKeypad=isKeypad, isSystemKey=isSystemKey, location=location, commands=commands)


    # func: insertText
    def insertText(self,text:str):
        """
            This method emulates inserting text that doesn't come from a key press,
            for example an emoji keyboard or an IME.
        Params:
            1. text: str
                The text to insert.
        """
        return self.drv.call(None,'Input.insertText',text=text)


    # func: dispatchMouseEvent
    def dispatchMouseEvent(self,type:str, x:int, y:int, modifiers:int=None, timestamp:TimeSinceEpoch=None, button:MouseButton=None, buttons:int=None, clickCount:int=None, deltaX:int=None, deltaY:int=None, pointerType:str=None):
        """
            Dispatches a mouse event to the page.
        Params:
            typeEnums = ['mousePressed', 'mouseReleased', 'mouseMoved', 'mouseWheel']
            1. type: str
                Type of the mouse event.
            2. x: int
                X coordinate of the event relative to the main frame's viewport in CSS pixels.
            3. y: int
                Y coordinate of the event relative to the main frame's viewport in CSS pixels. 0 refers tothe top of the viewport and Y increases as it proceeds towards the bottom of the viewport.
            4. modifiers: int (OPTIONAL)
                Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8(default: 0).
            5. timestamp: TimeSinceEpoch (OPTIONAL)
                Time at which the event occurred.
            6. button: MouseButton (OPTIONAL)
                Mouse button (default: "none").
            7. buttons: int (OPTIONAL)
                A number indicating which buttons are pressed on the mouse when a mouse event is triggered.Left=1, Right=2, Middle=4, Back=8, Forward=16, None=0.
            8. clickCount: int (OPTIONAL)
                Number of times the mouse button was clicked (default: 0).
            9. deltaX: int (OPTIONAL)
                X delta in CSS pixels for mouse wheel event (default: 0).
            10. deltaY: int (OPTIONAL)
                Y delta in CSS pixels for mouse wheel event (default: 0).
            pointerTypeEnums = ['mouse', 'pen']
            11. pointerType: str (OPTIONAL)
                Pointer type (default: "mouse").
        """
        return self.drv.call(None,'Input.dispatchMouseEvent',type=type, x=x, y=y, modifiers=modifiers, timestamp=timestamp, button=button, buttons=buttons, clickCount=clickCount, deltaX=deltaX, deltaY=deltaY, pointerType=pointerType)


    # func: dispatchTouchEvent
    def dispatchTouchEvent(self,type:str, touchPoints:List[TouchPoint], modifiers:int=None, timestamp:TimeSinceEpoch=None):
        """
            Dispatches a touch event to the page.
        Params:
            typeEnums = ['touchStart', 'touchEnd', 'touchMove', 'touchCancel']
            1. type: str
                Type of the touch event. TouchEnd and TouchCancel must not contain any touch points, whileTouchStart and TouchMove must contains at least one.
            2. touchPoints: List[TouchPoint]
                Active touch points on the touch device. One event per any changed point (compared toprevious touch event in a sequence) is generated, emulating pressing/moving/releasing pointsone by one.
            3. modifiers: int (OPTIONAL)
                Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8(default: 0).
            4. timestamp: TimeSinceEpoch (OPTIONAL)
                Time at which the event occurred.
        """
        return self.drv.call(None,'Input.dispatchTouchEvent',type=type, touchPoints=touchPoints, modifiers=modifiers, timestamp=timestamp)


    # func: emulateTouchFromMouseEvent
    def emulateTouchFromMouseEvent(self,type:str, x:int, y:int, button:MouseButton, timestamp:TimeSinceEpoch=None, deltaX:int=None, deltaY:int=None, modifiers:int=None, clickCount:int=None):
        """
            Emulates touch event from the mouse event parameters.
        Params:
            typeEnums = ['mousePressed', 'mouseReleased', 'mouseMoved', 'mouseWheel']
            1. type: str
                Type of the mouse event.
            2. x: int
                X coordinate of the mouse pointer in DIP.
            3. y: int
                Y coordinate of the mouse pointer in DIP.
            4. button: MouseButton
                Mouse button. Only "none", "left", "right" are supported.
            5. timestamp: TimeSinceEpoch (OPTIONAL)
                Time at which the event occurred (default: current time).
            6. deltaX: int (OPTIONAL)
                X delta in DIP for mouse wheel event (default: 0).
            7. deltaY: int (OPTIONAL)
                Y delta in DIP for mouse wheel event (default: 0).
            8. modifiers: int (OPTIONAL)
                Bit field representing pressed modifier keys. Alt=1, Ctrl=2, Meta/Command=4, Shift=8(default: 0).
            9. clickCount: int (OPTIONAL)
                Number of times the mouse button was clicked (default: 0).
        """
        return self.drv.call(None,'Input.emulateTouchFromMouseEvent',type=type, x=x, y=y, button=button, timestamp=timestamp, deltaX=deltaX, deltaY=deltaY, modifiers=modifiers, clickCount=clickCount)


    # func: setIgnoreInputEvents
    def setIgnoreInputEvents(self,ignore:bool):
        """
            Ignores input events (useful while auditing page).
        Params:
            1. ignore: bool
                Ignores input events processing when set to true.
        """
        return self.drv.call(None,'Input.setIgnoreInputEvents',ignore=ignore)


    # func: synthesizePinchGesture
    def synthesizePinchGesture(self,x:int, y:int, scaleFactor:int, relativeSpeed:int=None, gestureSourceType:GestureSourceType=None):
        """
            Synthesizes a pinch gesture over a time period by issuing appropriate touch events.
        Params:
            1. x: int
                X coordinate of the start of the gesture in CSS pixels.
            2. y: int
                Y coordinate of the start of the gesture in CSS pixels.
            3. scaleFactor: int
                Relative scale factor after zooming (>1.0 zooms in, <1.0 zooms out).
            4. relativeSpeed: int (OPTIONAL)
                Relative pointer speed in pixels per second (default: 800).
            5. gestureSourceType: GestureSourceType (OPTIONAL)
                Which type of input events to be generated (default: 'default', which queries the platformfor the preferred input type).
        """
        return self.drv.call(None,'Input.synthesizePinchGesture',x=x, y=y, scaleFactor=scaleFactor, relativeSpeed=relativeSpeed, gestureSourceType=gestureSourceType)


    # func: synthesizeScrollGesture
    def synthesizeScrollGesture(self,x:int, y:int, xDistance:int=None, yDistance:int=None, xOverscroll:int=None, yOverscroll:int=None, preventFling:bool=None, speed:int=None, gestureSourceType:GestureSourceType=None, repeatCount:int=None, repeatDelayMs:int=None, interactionMarkerName:str=None):
        """
            Synthesizes a scroll gesture over a time period by issuing appropriate touch events.
        Params:
            1. x: int
                X coordinate of the start of the gesture in CSS pixels.
            2. y: int
                Y coordinate of the start of the gesture in CSS pixels.
            3. xDistance: int (OPTIONAL)
                The distance to scroll along the X axis (positive to scroll left).
            4. yDistance: int (OPTIONAL)
                The distance to scroll along the Y axis (positive to scroll up).
            5. xOverscroll: int (OPTIONAL)
                The number of additional pixels to scroll back along the X axis, in addition to the givendistance.
            6. yOverscroll: int (OPTIONAL)
                The number of additional pixels to scroll back along the Y axis, in addition to the givendistance.
            7. preventFling: bool (OPTIONAL)
                Prevent fling (default: true).
            8. speed: int (OPTIONAL)
                Swipe speed in pixels per second (default: 800).
            9. gestureSourceType: GestureSourceType (OPTIONAL)
                Which type of input events to be generated (default: 'default', which queries the platformfor the preferred input type).
            10. repeatCount: int (OPTIONAL)
                The number of times to repeat the gesture (default: 0).
            11. repeatDelayMs: int (OPTIONAL)
                The number of milliseconds delay between each repeat. (default: 250).
            12. interactionMarkerName: str (OPTIONAL)
                The name of the interaction markers to generate, if not empty (default: "").
        """
        return self.drv.call(None,'Input.synthesizeScrollGesture',x=x, y=y, xDistance=xDistance, yDistance=yDistance, xOverscroll=xOverscroll, yOverscroll=yOverscroll, preventFling=preventFling, speed=speed, gestureSourceType=gestureSourceType, repeatCount=repeatCount, repeatDelayMs=repeatDelayMs, interactionMarkerName=interactionMarkerName)


    # func: synthesizeTapGesture
    def synthesizeTapGesture(self,x:int, y:int, duration:int=None, tapCount:int=None, gestureSourceType:GestureSourceType=None):
        """
            Synthesizes a tap gesture over a time period by issuing appropriate touch events.
        Params:
            1. x: int
                X coordinate of the start of the gesture in CSS pixels.
            2. y: int
                Y coordinate of the start of the gesture in CSS pixels.
            3. duration: int (OPTIONAL)
                Duration between touchdown and touchup events in ms (default: 50).
            4. tapCount: int (OPTIONAL)
                Number of times to perform the tap (e.g. 2 for double tap, default: 1).
            5. gestureSourceType: GestureSourceType (OPTIONAL)
                Which type of input events to be generated (default: 'default', which queries the platformfor the preferred input type).
        """
        return self.drv.call(None,'Input.synthesizeTapGesture',x=x, y=y, duration=duration, tapCount=tapCount, gestureSourceType=gestureSourceType)



